%{

#include "Ast.h"
#include "ParserUtil.h"
#include "Error.h"

using namespace std;

extern int verbosity;
extern int yylex();
extern void yyerror(const char *s);
int offSet;
extern const OpNode::OpInfo opInfo[];

%}

%union{
  unsigned int 		 uVal;
  double             dVal;
  char*              cVal;
  vector<string>*    strVector;
  Value*             valVal;

  ExprNode*          exprVal;
  vector<ExprNode*>* exprList;
  RefExprNode*       refexpVal;

  ClassEntry*        classEntry;
  Type*              typeVal;
  vector<Type*>*     typeList; 

  EventEntry*        eventEntry;                        
  VariableEntry*     variableEntry;
  FunctionEntry*     functionEntry;

  BasePatNode*       patVal;
  PrimitivePatNode*  primPatVal;
  StmtNode*          stmtVal;
  list<StmtNode*>*   stmtList;
  IfNode*            ifVal;
  CompoundStmtNode*  compoundStmtVal;
  RuleNode*          ruleNode;

  vector<RuleNode*>* transList;
  
  vector<Type*>*     formalTypeVal;
  const OpNode::OpInfo*    funIval;

  vector<VariableEntry*>* paramList;
};

/* Operators */

%token TOK_LEX_ERROR TOK_PAT_STAR TOK_PAT_OR TOK_PAT_NOT
%token TOK_PLUS TOK_MINUS TOK_UMINUS TOK_MULT TOK_DIV TOK_MOD 
%token TOK_BITAND TOK_BITOR TOK_BITNOT TOK_BITXOR TOK_SHL TOK_SHR 
%token TOK_GT TOK_LT TOK_GE TOK_LE TOK_EQ  TOK_NE TOK_AND TOK_OR TOK_NOT 
%token TOK_COMMA TOK_ASSIGN TOK_SEMICOLON TOK_COLON TOK_ARROW
%token TOK_LBRACE TOK_RBRACE TOK_LPAREN TOK_RPAREN
%token TOK_LBRACK TOK_RBRACK TOK_QMARK

/* Key words */

%token TOK_IF TOK_ELSE TOK_CLASS TOK_RETURN TOK_EVENT TOK_ANY TOK_PRINT 
%token TOK_WHILE TOK_BREAK TOK_CONTINUE
%token TOK_UINTNUM TOK_DOUBLENUM TOK_VOID TOK_STRING TOK_STRCONST 
%token TOK_BIT TOK_ENUM TOK_LONG
%token TOK_INT TOK_UNSIGNED TOK_BOOL TOK_BYTE TOK_DOUBLE TOK_SHORT
%token TOK_TRUE TOK_FALSE TOK_IDENT
%token TOK_DOUBLE_COLON TOK_DOT

/******************************** Type Info ********************************/
%type <functionEntry> function_header function_decl
%type <variableEntry> variable_decl formal_param variable_decl1 variable_decl2
%type <typeList> formal_param_list formal_param_plus 
%type <eventEntry> event_decl_hdr event_decl
%type <patVal> event_pattern
%type <primPatVal> event primitive_pat 
%type <typeVal> type baseType 
%type <exprList> expr_list expr_plus
%type <exprVal> expr function_invocation assignment
%type <refexpVal> ref_expr
%type <ruleNode> rule

%type <cVal> TOK_IDENT TOK_PRINT event_name
%type <uVal> TOK_UINTNUM 
%type <dVal> TOK_DOUBLENUM 
%type <cVal> TOK_STRCONST

%type <valVal> literal

%type <stmtList> stmt_plus
%type <stmtVal> stmt simple_stmt asg_stmt 
%type <compoundStmtVal> compoundStmt fun_rest
%type <ifVal>  if_then_else_stmt

%type <paramList> event_formal_params
/*********************   Precedence and Associativity    ********************/

%nonassoc TOK_ASSIGN

%left  TOK_PAT_OR 
%left  TOK_COLON
%left  TOK_PAT_STAR
%right TOK_PAT_NOT

%left  TOK_OR
%left  TOK_AND
%right TOK_NOT

%nonassoc TOK_EQ TOK_NE TOK_GT TOK_LT TOK_GE TOK_LE

%left  TOK_BITOR TOK_BITXOR
%left  TOK_BITAND
%right TOK_BITNOT 
%left  TOK_SHL TOK_SHR

%right TOK_DOUBLE_COLON

%left  TOK_PLUS TOK_MINUS
%left  TOK_MULT TOK_DIV TOK_MOD
%right TOK_UMINUS 

%left  TOK_LBRACK
%left  TOK_DOT

/**************************************************************************/

%start specification
%%

specification: ifc_decl_star rule_star {
};

ifc_decl_star: /* empty */ {
}
| ifc_decl_star ifc_decl {}
| ifc_decl_star error TOK_SEMICOLON {
	errMsg("Syntax error, expecting a declaration");
}
;

ifc_decl: TOK_SEMICOLON
| class_decl
| function_decl
| event_decl
| variable_decl
;

class_decl: TOK_CLASS TOK_IDENT TOK_SEMICOLON {
	SymTabEntry *ste = stm.lookUp($2);
	if (ste) {
		errMsg(string("Redefinition of name ") + $2);
	} else {
		ClassEntry *ce = new ClassEntry($2);
		stm.insert(ce);
		ce->type(new Type(ce, Type::CLASS));
	}
}
;

function_decl: type function_header TOK_LPAREN formal_param_list TOK_RPAREN fun_rest {
	if ($2) {
		stm.leaveScope();
		FunctionEntry *fe = $2;
		if ($1)
		{
			// cout << "return type : " << $1->name() << "\n";
		}
		else
		{
			cout << "return type is bad\n";
		}
		fe->type(new Type($4, $1));
		
		fe->body($6);
	} else {
		SymTabEntry *scopeEntry = stm.currentScope();
		SymTabEntry *ste;
		SymTab::iterator it = scopeEntry->symTab()->begin();
		while (it != scopeEntry->symTab()->end()) {
			ste = *it;
			if (ste->kind() == SymTabEntry::Kind::VARIABLE_KIND) {
				((VariableEntry*)ste)->varKind(VariableEntry::GLOBAL_VAR);
			}
			++it;
		}
	}
}
;

function_header: TOK_IDENT {
	SymTabEntry *ste = stm.lookUp($1);
	if (ste) {
		errMsg(string("Redefinition of name ") + $1);
		$$ = NULL;
	} else {
		$$ = new FunctionEntry($1);
		stm.insert($$);
		stm.enterScope($$);
	}
}
;

fun_rest: TOK_SEMICOLON {
	$$ = NULL;
}
| TOK_LBRACE variable_decls stmt_plus TOK_RBRACE {
	$$ = new CompoundStmtNode($3);
}
;

variable_decls: /* empty */
| variable_decls variable_decl2 TOK_SEMICOLON {
}
;

variable_decl2: type TOK_IDENT {
	SymTabEntry *ste = stm.lookUpInScope($2, stm.currentScope()->kind());
	if (ste) {
		errMsg(string("Redefinition of name ") + $2);
	} else {
		$$ = new VariableEntry($2, VariableEntry::LOCAL_VAR, $1);
		stm.insert($$);
	}
}
| type TOK_IDENT TOK_ASSIGN expr {
	SymTabEntry *ste = stm.lookUpInScope($2, stm.currentScope()->kind());
	if (ste) {
		errMsg(string("Redefinition of name ") + $2);
	} else {
		$$ = new VariableEntry($2, VariableEntry::LOCAL_VAR, $1, $4);
		stm.insert($$);
	}
}
| variable_decl2 TOK_COMMA TOK_IDENT {
	SymTabEntry *ste = stm.lookUpInScope($3, stm.currentScope()->kind());
	if (ste) {
		errMsg(string("Redefinition of name ") + $3);
	} else {
		$$ = new VariableEntry($3, VariableEntry::LOCAL_VAR, $1->type());
		stm.insert($$);
	}
}
| variable_decl2 TOK_COMMA TOK_IDENT TOK_ASSIGN expr {
	SymTabEntry *ste = stm.lookUpInScope($3, stm.currentScope()->kind());
	if (ste) {
		errMsg(string("Redefinition of name ") + $3);
	} else {
		$$ = new VariableEntry($3, VariableEntry::LOCAL_VAR, $1->type(), $5);
		stm.insert($$);
	}
}
;

event_decl: event_decl_hdr TOK_LPAREN formal_param_list TOK_RPAREN TOK_SEMICOLON {
	if ($1) {
		stm.leaveScope();
		$1->type(new Type($3, Type::EVENT));
	} else {
		Type *type = new Type($3, Type::VOID);
		delete type;
		SymTabEntry *scopeEntry = stm.currentScope();
		SymTabEntry *ste;
		SymTab::iterator it = scopeEntry->symTab()->begin();
		while (it != scopeEntry->symTab()->end()) {
			ste = *it;
			if (ste->kind() == SymTabEntry::Kind::VARIABLE_KIND) {
				((VariableEntry*)ste)->varKind(VariableEntry::GLOBAL_VAR);
			}
			++it;
		}
	}
};

event_decl_hdr: TOK_EVENT TOK_IDENT {
	SymTabEntry *ste = stm.lookUp($2);
	if (ste) {
		errMsg(string("Redefinition of name ") + $2);
		$$ = NULL;
	} else {
		$$ = new EventEntry($2);
		stm.insert($$);
		stm.enterScope($$);
	}
};

formal_param_list: /* empty */ {
	$$ = NULL;
}
| formal_param_plus {
	$$ = $1;
}
;

formal_param_plus: formal_param {
	$$ = new vector<Type*>;
	if ($1)
		$$->push_back($1->type());
}
| formal_param_plus TOK_COMMA formal_param {
	if ($3)
		$1->push_back($3->type());
}
;

formal_param: type TOK_IDENT {
	SymTabEntry *ste = stm.lookUpInScope($2, stm.currentScope()->kind());
	if (ste) {
		errMsg(string("Redefinition of name ") + $2);
		$$ = NULL;
	} else {
		$$ = new VariableEntry($2, VariableEntry::PARAM_VAR, $1);
		stm.insert($$);
	}
}
;

type: baseType {
	$$ = $1;
}
| TOK_IDENT {
	SymTabEntry *ste = stm.lookUp($1);
	if (!ste) {
		errMsg(string("Undeclared type \"") + $1 + string("\""));
		$$ = NULL;
	} else if (ste->typeTag() != Type::CLASS) {
		errMsg(string("Unknown type \"") + $1 + string("\""));
		$$ = NULL;
	} else {
		$$ = ste->type();
	}
}
;

baseType: TOK_VOID {
	$$ = new Type();
}
| TOK_BOOL {
	$$ = new Type(Type::BOOL);
}
| TOK_STRING {
	$$ = new Type(Type::STRING);
}
| TOK_BYTE {
	$$ = new Type(Type::BYTE);
}
| TOK_UNSIGNED TOK_INT {
	$$ = new Type(Type::UINT);
}
| TOK_INT {
	$$ = new Type(Type::INT);
}
| TOK_DOUBLE {
	$$ = new Type(Type::DOUBLE);
}
| TOK_UNSIGNED TOK_VOID {
	errMsg("Invalid use of keyword \"unsigned\"");
	$$ = NULL;
}
| TOK_UNSIGNED TOK_BOOL {
	errMsg("Invalid use of keyword \"unsigned\"");
	$$ = NULL;
}
| TOK_UNSIGNED TOK_STRING {
	errMsg("Invalid use of keyword \"unsigned\"");
	$$ = NULL;
}
| TOK_UNSIGNED TOK_DOUBLE {
	errMsg("Invalid use of keyword \"unsigned\"");
	$$ = NULL;
}
;

variable_decl: variable_decl1 TOK_SEMICOLON {
	$$ = $1;
}
;

variable_decl1: type TOK_IDENT {
	SymTabEntry *ste = stm.lookUp($2);
	if (ste) {
		errMsg(string("Redefinition of name ") + $2);
		$$ = NULL;
	} else {
		$$ = new VariableEntry($2, VariableEntry::GLOBAL_VAR, $1);
		stm.insert($$);
	}
}
| type TOK_IDENT TOK_ASSIGN expr {
	SymTabEntry *ste = stm.lookUp($2);
	if (ste) {
		errMsg(string("Redefinition of name ") + $2);
		$$ = NULL;
	} else {
		$$ = new VariableEntry($2, VariableEntry::GLOBAL_VAR, $1, $4);
		stm.insert($$);
	}
}
| variable_decl1 TOK_COMMA TOK_IDENT {
	SymTabEntry *ste = stm.lookUp($3);
	if (ste) {
		errMsg(string("Redefinition of name ") + $3);
		$$ = NULL;
	} else {
		$$ = new VariableEntry($3, VariableEntry::GLOBAL_VAR, $1->type());
		stm.insert($$);
	}
}
| variable_decl1 TOK_COMMA TOK_IDENT TOK_ASSIGN expr {
	SymTabEntry *ste = stm.lookUp($3);
	if (ste) {
		errMsg(string("Redefinition of name ") + $3);
		$$ = NULL;
	} else {
		$$ = new VariableEntry($3, VariableEntry::GLOBAL_VAR, $1->type(), $5);
		stm.insert($$);
	}
}
;

ref_expr: TOK_IDENT {
	SymTabEntry *ste = stm.lookUp($1);
	if (!ste) {
		errMsg(string("Undeclared identifier \"") + $1 + string("\""));
		$$ = NULL;
	} else {
		$$ = new RefExprNode($1, ste);
	}
}
;

assignment: ref_expr TOK_ASSIGN expr {
	if ($1 && $3)
		$$ = new OpNode(OpNode::OpCode::ASSIGN, $1, $3);
	else
		$$ = NULL;
}
;

literal: TOK_STRCONST {
	$$ = new Value($1);
}
| TOK_UINTNUM {
	$$ = new Value($1, Type::UINT);
}
| TOK_DOUBLENUM {
	$$ = new Value($1);
}
| TOK_TRUE {
	$$ = new Value(true);
}
| TOK_FALSE {
	$$ = new Value(false);
};

expr: literal {
	$$ = new ValueNode($1);
}
| ref_expr {
	$$ = $1;
}
| assignment {
	$$ = $1;
}
| function_invocation {
	$$ = $1;
}
| TOK_BITNOT expr {
	$$ = new OpNode(OpNode::OpCode::BITNOT, $2);
}
| TOK_MINUS expr %prec TOK_UMINUS {
	$$ = new OpNode(OpNode::OpCode::UMINUS, $2);
}
| TOK_NOT expr {
	$$ = new OpNode(OpNode::OpCode::NOT, $2);
}
| TOK_LPAREN expr TOK_RPAREN {
	$$ = $2;
}
| expr TOK_BITXOR expr {
	$$ = new OpNode(OpNode::OpCode::BITXOR, $1, $3);
}
| expr TOK_SHL expr {
	$$ = new OpNode(OpNode::OpCode::SHL, $1, $3);
}
| expr TOK_LE expr {
	$$ = new OpNode(OpNode::OpCode::LE, $1, $3);
}
| expr TOK_LT expr {
	$$ = new OpNode(OpNode::OpCode::LT, $1, $3);
}
| expr TOK_EQ expr {
	$$ = new OpNode(OpNode::OpCode::EQ, $1, $3);
}
| expr TOK_GE expr {
	$$ = new OpNode(OpNode::OpCode::GE, $1, $3);
}
| expr TOK_SHR expr {
	$$ = new OpNode(OpNode::OpCode::SHR, $1, $3);
}
| expr TOK_GT expr {
	$$ = new OpNode(OpNode::OpCode::GT, $1, $3);
}
| expr TOK_OR expr {
	$$ = new OpNode(OpNode::OpCode::OR, $1, $3);
}
| expr TOK_BITOR expr {
	$$ = new OpNode(OpNode::OpCode::BITOR, $1, $3);
}
| expr TOK_MINUS expr {
	$$ = new OpNode(OpNode::OpCode::MINUS, $1, $3);
}
| expr TOK_NE expr {
	$$ = new OpNode(OpNode::OpCode::NE, $1, $3);
}
| expr TOK_DIV expr {
	$$ = new OpNode(OpNode::OpCode::DIV, $1, $3);
}
| expr TOK_MULT expr {
	$$ = new OpNode(OpNode::OpCode::MULT, $1, $3);
}
| expr TOK_BITAND expr {
	$$ = new OpNode(OpNode::OpCode::BITAND, $1, $3);
}
| expr TOK_AND expr {
	$$ = new OpNode(OpNode::OpCode::AND, $1, $3);
}
| expr TOK_MOD expr {
	$$ = new OpNode(OpNode::OpCode::MOD, $1, $3);
}
| expr TOK_PLUS expr {
	$$ = new OpNode(OpNode::OpCode::PLUS, $1, $3);
}
;

if_then_else_stmt: TOK_IF expr stmt {
	$$ = new IfNode($2, $3);
}
| TOK_IF expr stmt TOK_ELSE stmt {
	$$ = new IfNode($2, $3, $5);
}

asg_stmt: assignment TOK_SEMICOLON {
	$$ = new ExprStmtNode($1);
};


function_invocation: TOK_IDENT TOK_LPAREN expr_list TOK_RPAREN {
	SymTabEntry *ste = stm.lookUp($1);
	if (!ste) {
		errMsg(string("\"") + $1 + string("\" is not a function or module name"));
		$$ = NULL;
	} else if (ste->typeTag() != Type::FUNCTION && ste->typeTag() != Type::EVENT) {
		errMsg(string("\"") + $1 + string("\" is not a function or module name"));
		$$ = NULL;
	} else {
		FunctionEntry *fe = (FunctionEntry*) ste;
		vector<Type*>* args = fe->type()->argTypes();
		vector<Type*>::iterator it;
		vector<ExprNode*>::iterator it1 = $3->begin();
		if ($3->size() == args->size())
		{
			for(it = args->begin();it != args->end(); ++it)
			{
				cout << "invoking function \n";
				/*if ((*it)->name() !=  (*it1)->type()->name())
				{
					errMsg("args type mis-match in function");
				}
				++it1;*/
			}
		}
		else
		{
			errMsg("invalid number of arguments");
		}
		$$ = new InvocationNode(ste, $3);
		cout << "done invoking function \n";
	}
};

expr_list: {
	$$ = NULL;
}
| expr_plus {
	$$ = $1;
}
;

expr_plus: expr {
	$$ = new vector<ExprNode*>;
	$$->push_back($1);
}
| expr_plus TOK_COMMA expr {
	$1->push_back($3);
}
;

simple_stmt: TOK_RETURN expr TOK_SEMICOLON {
	SymTabEntry *ste = stm.currentScope();
	if (ste->kind() != SymTabEntry::Kind::FUNCTION_KIND) {
		errMsg("Return statement is valid only within a function");
	}
	else
	{
		cout << "handling return statement\n";
		FunctionEntry *fe =(FunctionEntry*) ste;
		cout << "return type : " << fe->name() << "\n";

		if (fe)
		{
			cout << "function ptr not null\n";
		}
		if (fe->type())
		{
			cout << "function type ptr not null\n";

		}
		if (fe->type()->argTypes())
		{
			cout << "function ret type ptr not null\n";
		}
		if (fe && fe->type() && fe->type()->retType())
		{
			errMsg("return type mis-match");
		}
	}
	$$ = new ReturnStmtNode($2, (FunctionEntry*)ste);
}
| /* empty statement */ TOK_SEMICOLON {
	$$ = NULL;
}
| asg_stmt {
	$$ = $1;
}
| function_invocation TOK_SEMICOLON {
	$$ = new ExprStmtNode($1);
}
;

stmt: simple_stmt {
	$$ = $1;
}
| compoundStmt {
	$$ = $1;
}
| if_then_else_stmt {
	$$ = $1;
}
;

compoundStmt: TOK_LBRACE stmt_plus TOK_RBRACE {
	$$ = new CompoundStmtNode($2);
}
;

stmt_plus: stmt {
	$$ = new list<StmtNode*>;
	$$->push_back($1);
}
| stmt_plus stmt {
	$1->push_back($2);
}
;

rule_star: /* empty */ {
       errMsg("Must contain at least one rule");
}
| rule_list
;

rule_list: rule
| rule_list rule
;

rule: event_pattern TOK_ARROW stmt rule_end {
	if ($1) {
		if ($3) {
			SymTabEntry *ste = stm.currentScope();
			$$ = new RuleNode((RuleBlockEntry*)ste, $1, $3);
			GlobalEntry *ge = (GlobalEntry*)stm.currentScope(SymTabEntry::Kind::GLOBAL_KIND);
			ge->addRule($$);
		}
		stm.leaveScope();
	}
}
;

rule_end: /* empty */
| TOK_SEMICOLON
;

event_pattern: primitive_pat {
	$$ = $1;
}
| TOK_NOT event_pattern %prec TOK_PAT_NOT {
	if ($2) {
		if ($2->kind() != BasePatNode::PatNodeKind::PRIMITIVE)
			errMsg("Only simple patterns without `.', `*', and `!' operators can be negated");
		$$ = new PatNode(BasePatNode::PatNodeKind::NEG, $2);
	} else {
		$$ = NULL;
	}
}
| TOK_LPAREN event_pattern TOK_RPAREN {
	if ($2)
		$$ = $2;
	else
		$$ = NULL;
}
| event_pattern TOK_COLON event_pattern {
	if ($1) {
		if ($3) {
			$$ = new PatNode(BasePatNode::PatNodeKind::SEQ, $1, $3);
		} else {
			stm.leaveScope();
			$$ = NULL;
		}
	} else {
		$$ = NULL;
	}
}
| event_pattern TOK_PAT_OR event_pattern {
	if ($1) {
		if ($3) {
			$$ = new PatNode(BasePatNode::PatNodeKind::OR, $1, $3);
		} else {
			stm.leaveScope();
			$$ = NULL;
		}
	} else {
		$$ = NULL;
	}
}
| event_pattern TOK_PAT_STAR {
	if ($1)
		$$ = new PatNode(BasePatNode::PatNodeKind::STAR, $1);
	else
		$$ = NULL;
}
;

primitive_pat: event {
	$$ = $1;
}
| event TOK_BITOR expr {
	if ($1)
		$1->cond($3);
	$$ = $1;
}
;

event: TOK_ANY {
	SymTabEntry *ste = stm.lookUp("any");
	if (!ste) {
		errMsg("Undeclared symbol any");
		$$ = NULL;
	} else {
		$$ = new PrimitivePatNode((EventEntry*)ste, NULL);
	}
	ste = stm.currentScope();
	if (ste->kind() == SymTabEntry::Kind::GLOBAL_KIND) {
		RuleBlockEntry *rbe = new RuleBlockEntry();
		stm.enterScope(rbe);
	}
}
| event_name TOK_LPAREN event_formal_params TOK_RPAREN {
	if ($1) {
		SymTabEntry *ste = stm.lookUp($1);
		EventEntry *ee = (EventEntry*)ste;
		Type *eeType = ee->type();
		if (eeType->argTypes() && $3) {
			if (eeType->argTypes()->size() < $3->size())
				errMsg($1 + string(": mismatch in the number of arguments"));
		}
		$$ = new PrimitivePatNode((EventEntry*)ste, $3);
	} else {
		$$ = NULL;
	}
}
;

event_name: TOK_IDENT {
	SymTabEntry *ste = stm.lookUp($1);
	if (!ste) {
		errMsg(string("Expected an event name, but got \"") + $1 + string("\""));
		$$ = NULL;
	} else if (ste->typeTag() != Type::EVENT) {
		errMsg(string("Expected an event name, but got \"") + $1 + string("\""));
		$$ = NULL;
	} else {
		ste = stm.currentScope();
		if (ste->kind() == SymTabEntry::Kind::GLOBAL_KIND) {
			RuleBlockEntry *rbe = new RuleBlockEntry();
			stm.enterScope(rbe);
		}
		$$ = $1;
	}
}
;

event_formal_params: {
	$$ = NULL;
}
| TOK_IDENT {
	SymTabEntry *ste = stm.currentScope();
	if (ste->kind() == SymTabEntry::Kind::RULE_BLOCK_KIND) {
		ste = stm.lookUpInScope($1, SymTabEntry::Kind::RULE_BLOCK_KIND);
		if (ste)
			errMsg(string("Redefinition of name ") + $1);
		VariableEntry *ve = new VariableEntry($1, VariableEntry::PARAM_VAR);
		$$ = new vector<VariableEntry*>;
		$$->push_back(ve);
		stm.insert(ve);
	} else {
		$$ = NULL;
	}
}
| event_formal_params TOK_COMMA TOK_IDENT {
	if ($1) {
		SymTabEntry *ste = stm.lookUpInScope($3, SymTabEntry::Kind::RULE_BLOCK_KIND);
		if (ste) {
			errMsg(string("Redefinition of name ") + $3);
		}
		VariableEntry *ve = new VariableEntry($3, VariableEntry::PARAM_VAR);
		$1->push_back(ve);
		stm.insert(ve);
	} else {
		$$ = NULL;
	}
}
;
%%
